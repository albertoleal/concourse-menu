// This file was generated by counterfeiter
package flyfakes

import (
	"sync"

	"github.com/albertoleal/concourse-metrics/fly"
	"github.com/concourse/atc"
	"github.com/concourse/go-concourse/concourse"
)

type FakeClient struct {
	ConcourseURLStub        func() string
	concourseURLMutex       sync.RWMutex
	concourseURLArgsForCall []struct{}
	concourseURLReturns     struct {
		result1 string
	}
	BuildsStub        func(concourse.Page) ([]atc.Build, concourse.Pagination, error)
	buildsMutex       sync.RWMutex
	buildsArgsForCall []struct {
		arg1 concourse.Page
	}
	buildsReturns struct {
		result1 []atc.Build
		result2 concourse.Pagination
		result3 error
	}
	BuildEventsStub        func(buildID string) ([]byte, error)
	buildEventsMutex       sync.RWMutex
	buildEventsArgsForCall []struct {
		buildID string
	}
	buildEventsReturns struct {
		result1 []byte
		result2 error
	}
}

func (fake *FakeClient) ConcourseURL() string {
	fake.concourseURLMutex.Lock()
	fake.concourseURLArgsForCall = append(fake.concourseURLArgsForCall, struct{}{})
	fake.concourseURLMutex.Unlock()
	if fake.ConcourseURLStub != nil {
		return fake.ConcourseURLStub()
	} else {
		return fake.concourseURLReturns.result1
	}
}

func (fake *FakeClient) ConcourseURLCallCount() int {
	fake.concourseURLMutex.RLock()
	defer fake.concourseURLMutex.RUnlock()
	return len(fake.concourseURLArgsForCall)
}

func (fake *FakeClient) ConcourseURLReturns(result1 string) {
	fake.ConcourseURLStub = nil
	fake.concourseURLReturns = struct {
		result1 string
	}{result1}
}

func (fake *FakeClient) Builds(arg1 concourse.Page) ([]atc.Build, concourse.Pagination, error) {
	fake.buildsMutex.Lock()
	fake.buildsArgsForCall = append(fake.buildsArgsForCall, struct {
		arg1 concourse.Page
	}{arg1})
	fake.buildsMutex.Unlock()
	if fake.BuildsStub != nil {
		return fake.BuildsStub(arg1)
	} else {
		return fake.buildsReturns.result1, fake.buildsReturns.result2, fake.buildsReturns.result3
	}
}

func (fake *FakeClient) BuildsCallCount() int {
	fake.buildsMutex.RLock()
	defer fake.buildsMutex.RUnlock()
	return len(fake.buildsArgsForCall)
}

func (fake *FakeClient) BuildsArgsForCall(i int) concourse.Page {
	fake.buildsMutex.RLock()
	defer fake.buildsMutex.RUnlock()
	return fake.buildsArgsForCall[i].arg1
}

func (fake *FakeClient) BuildsReturns(result1 []atc.Build, result2 concourse.Pagination, result3 error) {
	fake.BuildsStub = nil
	fake.buildsReturns = struct {
		result1 []atc.Build
		result2 concourse.Pagination
		result3 error
	}{result1, result2, result3}
}

func (fake *FakeClient) BuildEvents(buildID string) ([]byte, error) {
	fake.buildEventsMutex.Lock()
	fake.buildEventsArgsForCall = append(fake.buildEventsArgsForCall, struct {
		buildID string
	}{buildID})
	fake.buildEventsMutex.Unlock()
	if fake.BuildEventsStub != nil {
		return fake.BuildEventsStub(buildID)
	} else {
		return fake.buildEventsReturns.result1, fake.buildEventsReturns.result2
	}
}

func (fake *FakeClient) BuildEventsCallCount() int {
	fake.buildEventsMutex.RLock()
	defer fake.buildEventsMutex.RUnlock()
	return len(fake.buildEventsArgsForCall)
}

func (fake *FakeClient) BuildEventsArgsForCall(i int) string {
	fake.buildEventsMutex.RLock()
	defer fake.buildEventsMutex.RUnlock()
	return fake.buildEventsArgsForCall[i].buildID
}

func (fake *FakeClient) BuildEventsReturns(result1 []byte, result2 error) {
	fake.BuildEventsStub = nil
	fake.buildEventsReturns = struct {
		result1 []byte
		result2 error
	}{result1, result2}
}

var _ fly.Client = new(FakeClient)
